//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Chess.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ChessLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, WS=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "WS"
	};


	public ChessLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ChessLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'K'", "'Q'", "'R'", "'B'", "'N'", "'x'", "'a'", "'b'", "'c'", "'d'", 
		"'e'", "'f'", "'g'", "'h'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", 
		"'7'", "'8'", "'='", "'+'", "'#'", "'O-O'", "'O-O-O'", "'e.p.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Chess.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ChessLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,131,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,27,1,28,4,28,126,8,28,11,28,12,28,127,1,28,1,
		28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,1,0,1,3,0,9,10,13,13,32,32,131,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,5,63,1,0,0,0,7,65,1,0,0,0,9,67,1,0,0,
		0,11,69,1,0,0,0,13,71,1,0,0,0,15,73,1,0,0,0,17,75,1,0,0,0,19,77,1,0,0,
		0,21,79,1,0,0,0,23,81,1,0,0,0,25,83,1,0,0,0,27,85,1,0,0,0,29,87,1,0,0,
		0,31,89,1,0,0,0,33,91,1,0,0,0,35,93,1,0,0,0,37,95,1,0,0,0,39,97,1,0,0,
		0,41,99,1,0,0,0,43,101,1,0,0,0,45,103,1,0,0,0,47,105,1,0,0,0,49,107,1,
		0,0,0,51,109,1,0,0,0,53,113,1,0,0,0,55,119,1,0,0,0,57,125,1,0,0,0,59,60,
		5,75,0,0,60,2,1,0,0,0,61,62,5,81,0,0,62,4,1,0,0,0,63,64,5,82,0,0,64,6,
		1,0,0,0,65,66,5,66,0,0,66,8,1,0,0,0,67,68,5,78,0,0,68,10,1,0,0,0,69,70,
		5,120,0,0,70,12,1,0,0,0,71,72,5,97,0,0,72,14,1,0,0,0,73,74,5,98,0,0,74,
		16,1,0,0,0,75,76,5,99,0,0,76,18,1,0,0,0,77,78,5,100,0,0,78,20,1,0,0,0,
		79,80,5,101,0,0,80,22,1,0,0,0,81,82,5,102,0,0,82,24,1,0,0,0,83,84,5,103,
		0,0,84,26,1,0,0,0,85,86,5,104,0,0,86,28,1,0,0,0,87,88,5,49,0,0,88,30,1,
		0,0,0,89,90,5,50,0,0,90,32,1,0,0,0,91,92,5,51,0,0,92,34,1,0,0,0,93,94,
		5,52,0,0,94,36,1,0,0,0,95,96,5,53,0,0,96,38,1,0,0,0,97,98,5,54,0,0,98,
		40,1,0,0,0,99,100,5,55,0,0,100,42,1,0,0,0,101,102,5,56,0,0,102,44,1,0,
		0,0,103,104,5,61,0,0,104,46,1,0,0,0,105,106,5,43,0,0,106,48,1,0,0,0,107,
		108,5,35,0,0,108,50,1,0,0,0,109,110,5,79,0,0,110,111,5,45,0,0,111,112,
		5,79,0,0,112,52,1,0,0,0,113,114,5,79,0,0,114,115,5,45,0,0,115,116,5,79,
		0,0,116,117,5,45,0,0,117,118,5,79,0,0,118,54,1,0,0,0,119,120,5,101,0,0,
		120,121,5,46,0,0,121,122,5,112,0,0,122,123,5,46,0,0,123,56,1,0,0,0,124,
		126,7,0,0,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,
		0,0,0,128,129,1,0,0,0,129,130,6,28,0,0,130,58,1,0,0,0,2,0,127,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
