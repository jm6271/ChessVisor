//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Chess.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ChessParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, WS=29;
	public const int
		RULE_parse = 0, RULE_move = 1, RULE_standardMove = 2, RULE_piece = 3, 
		RULE_disambiguation = 4, RULE_capture = 5, RULE_square = 6, RULE_file = 7, 
		RULE_rank = 8, RULE_promotion = 9, RULE_checkOrMate = 10, RULE_castling = 11, 
		RULE_enPassant = 12;
	public static readonly string[] ruleNames = {
		"parse", "move", "standardMove", "piece", "disambiguation", "capture", 
		"square", "file", "rank", "promotion", "checkOrMate", "castling", "enPassant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'K'", "'Q'", "'R'", "'B'", "'N'", "'x'", "'a'", "'b'", "'c'", "'d'", 
		"'e'", "'f'", "'g'", "'h'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", 
		"'7'", "'8'", "'='", "'+'", "'#'", "'O-O'", "'O-O-O'", "'e.p.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Chess.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ChessParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ChessParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ChessParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ChessParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			move();
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastlingContext castling() {
			return GetRuleContext<CastlingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnPassantContext enPassant() {
			return GetRuleContext<EnPassantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StandardMoveContext standardMove() {
			return GetRuleContext<StandardMoveContext>(0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 2, RULE_move);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				castling();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				enPassant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 31;
				standardMove();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PieceContext piece() {
			return GetRuleContext<PieceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisambiguationContext disambiguation() {
			return GetRuleContext<DisambiguationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PromotionContext promotion() {
			return GetRuleContext<PromotionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOrMateContext checkOrMate() {
			return GetRuleContext<CheckOrMateContext>(0);
		}
		public StandardMoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMove; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMoveContext standardMove() {
		StandardMoveContext _localctx = new StandardMoveContext(Context, State);
		EnterRule(_localctx, 4, RULE_standardMove);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 62L) != 0)) {
				{
				State = 34;
				piece();
				}
			}

			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 37;
				disambiguation();
				}
				break;
			}
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 40;
				capture();
				}
			}

			State = 43;
			square();
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 44;
				promotion();
				}
			}

			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23 || _la==T__24) {
				{
				State = 47;
				checkOrMate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PieceContext : ParserRuleContext {
		public PieceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PieceContext piece() {
		PieceContext _localctx = new PieceContext(Context, State);
		EnterRule(_localctx, 6, RULE_piece);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 62L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisambiguationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RankContext rank() {
			return GetRuleContext<RankContext>(0);
		}
		public DisambiguationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disambiguation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisambiguation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisambiguationContext disambiguation() {
		DisambiguationContext _localctx = new DisambiguationContext(Context, State);
		EnterRule(_localctx, 8, RULE_disambiguation);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				file();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				rank();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54;
				file();
				State = 55;
				rank();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 10, RULE_capture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RankContext rank() {
			return GetRuleContext<RankContext>(0);
		}
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 12, RULE_square);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			file();
			State = 62;
			rank();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 14, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32640L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankContext : ParserRuleContext {
		public RankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RankContext rank() {
		RankContext _localctx = new RankContext(Context, State);
		EnterRule(_localctx, 16, RULE_rank);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8355840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PromotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PieceContext piece() {
			return GetRuleContext<PieceContext>(0);
		}
		public PromotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_promotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPromotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PromotionContext promotion() {
		PromotionContext _localctx = new PromotionContext(Context, State);
		EnterRule(_localctx, 18, RULE_promotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__22);
			State = 69;
			piece();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOrMateContext : ParserRuleContext {
		public CheckOrMateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOrMate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckOrMate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckOrMateContext checkOrMate() {
		CheckOrMateContext _localctx = new CheckOrMateContext(Context, State);
		EnterRule(_localctx, 20, RULE_checkOrMate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_la = TokenStream.LA(1);
			if ( !(_la==T__23 || _la==T__24) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastlingContext : ParserRuleContext {
		public CastlingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castling; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastling(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastlingContext castling() {
		CastlingContext _localctx = new CastlingContext(Context, State);
		EnterRule(_localctx, 22, RULE_castling);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_la = TokenStream.LA(1);
			if ( !(_la==T__25 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnPassantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public EnPassantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enPassant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVisitor<TResult> typedVisitor = visitor as IChessVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnPassant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnPassantContext enPassant() {
		EnPassantContext _localctx = new EnPassantContext(Context, State);
		EnterRule(_localctx, 24, RULE_enPassant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			square();
			State = 76;
			Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,29,79,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,1,1,1,
		1,1,3,1,33,8,1,1,2,3,2,36,8,2,1,2,3,2,39,8,2,1,2,3,2,42,8,2,1,2,1,2,3,
		2,46,8,2,1,2,3,2,49,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,58,8,4,1,5,1,5,
		1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,12,1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,5,1,0,1,5,1,0,7,14,
		1,0,15,22,1,0,24,25,1,0,26,27,74,0,26,1,0,0,0,2,32,1,0,0,0,4,35,1,0,0,
		0,6,50,1,0,0,0,8,57,1,0,0,0,10,59,1,0,0,0,12,61,1,0,0,0,14,64,1,0,0,0,
		16,66,1,0,0,0,18,68,1,0,0,0,20,71,1,0,0,0,22,73,1,0,0,0,24,75,1,0,0,0,
		26,27,3,2,1,0,27,28,5,0,0,1,28,1,1,0,0,0,29,33,3,22,11,0,30,33,3,24,12,
		0,31,33,3,4,2,0,32,29,1,0,0,0,32,30,1,0,0,0,32,31,1,0,0,0,33,3,1,0,0,0,
		34,36,3,6,3,0,35,34,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,39,3,8,4,0,
		38,37,1,0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,42,3,10,5,0,41,40,1,0,0,0,
		41,42,1,0,0,0,42,43,1,0,0,0,43,45,3,12,6,0,44,46,3,18,9,0,45,44,1,0,0,
		0,45,46,1,0,0,0,46,48,1,0,0,0,47,49,3,20,10,0,48,47,1,0,0,0,48,49,1,0,
		0,0,49,5,1,0,0,0,50,51,7,0,0,0,51,7,1,0,0,0,52,58,3,14,7,0,53,58,3,16,
		8,0,54,55,3,14,7,0,55,56,3,16,8,0,56,58,1,0,0,0,57,52,1,0,0,0,57,53,1,
		0,0,0,57,54,1,0,0,0,58,9,1,0,0,0,59,60,5,6,0,0,60,11,1,0,0,0,61,62,3,14,
		7,0,62,63,3,16,8,0,63,13,1,0,0,0,64,65,7,1,0,0,65,15,1,0,0,0,66,67,7,2,
		0,0,67,17,1,0,0,0,68,69,5,23,0,0,69,70,3,6,3,0,70,19,1,0,0,0,71,72,7,3,
		0,0,72,21,1,0,0,0,73,74,7,4,0,0,74,23,1,0,0,0,75,76,3,12,6,0,76,77,5,28,
		0,0,77,25,1,0,0,0,7,32,35,38,41,45,48,57
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
